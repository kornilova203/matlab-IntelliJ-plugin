{
  parserClass="com.github.kornilova203.matlab.MatlabParser"
  parserUtilClass="com.github.kornilova203.matlab.MatlabParserUtil"

  extends="com.github.kornilova203.matlab.psi.MatlabASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.kornilova203.matlab.psi"
  psiImplPackage="com.github.kornilova203.matlab.psi.impl"

  elementTypeHolderClass="com.github.kornilova203.matlab.psi.MatlabTypes"
  elementTypeClass="com.github.kornilova203.matlab.psi.MatlabElementType"
  tokenTypeClass="com.github.kornilova203.matlab.psi.MatlabTokenType"

  elementTypeClass("function_declaration")="com.github.kornilova203.matlab.stub.MatlabFunctionDeclarationElementType"
  elementTypeClass("class_declaration")="com.github.kornilova203.matlab.stub.MatlabClassDeclarationElementType"
  elementTypeClass("global_variable_declaration")="com.github.kornilova203.matlab.stub.MatlabGlobalVariableElementType"

  parserImports=[
    "static com.github.kornilova203.matlab.MatlabElementTypes.*"
  ]

  tokens=[
      /* following regexps are copied from MatlabLexer.flex to enable live preview support */
      NEWLINE='regexp:(\R( \t)*)'
      WHITE_SPACE='regexp:[ \t\x0B\f]+' // do not match new line
      SINGLE_QUOTE="'"
      FLOAT='regexp:(([\d]*\.[\d]+)|([\d]+\.))i?'
      FLOAT_EXPONENTIAL='regexp:(([\d]*\.[\d]+)|([\d]+\.)|\d+)e[+-]?[\d]+i?'
      FOR='for'
      WHILE='while'
      FUNCTION='function'
      TRUE='true'
      FALSE='false'
      IDENTIFIER='regexp:[a-zA-Z][a-zA-Z0-9_]*'
      INTEGER='regexp:[0-9]+i?'

      ELLIPSIS='...'
      DOT='.'
      COMMA=','
      LPARENTH='('
      RPARENTH=')'
      LBRACKET='['
      RBRACKET=']'
      MUL='*'
      DOT_MUL='.*'
      RDIV='/'
      DOT_RDIV='./'
      LDIV='\'
      DOT_LDIV='.\'
      PLUS='+'
      PLUSPLUS='++'
      MINUS='-'
      MINUSMINUS='--'
      POW='^'
      DOT_POW='.^'
      ASSIGN='='
      OR='||'
      AND='&&'
      MATRIX_OR='|'
      MATRIX_AND='&'
      EQUAL='=='
      NOT_EQUAL='~='
      LESS='<'
      LESS_OR_EQUAL='<='
      MORE='>'
      MORE_OR_EQUAL='>='
      COLON=':'
      SEMICOLON=';'
      LBRACE='{'
      RBRACE='}'
      TILDA='~'
      AT='@'
      QUESTION_MARK='?'
      CTRANS="'"
      TRANS=".'"
    ]

    mixin("ref_expr")="com.github.kornilova203.matlab.psi.MatlabRefExprMixin"
    mixin("class_declaration")="com.github.kornilova203.matlab.psi.MatlabStubbedClassDeclaration"
    mixin("catch_block")="com.github.kornilova203.matlab.psi.MatlabCatchBlockMixin"
    mixin("function_declaration")="com.github.kornilova203.matlab.psi.MatlabStubbedFunctionDeclaration"
    mixin("parameter")="com.github.kornilova203.matlab.psi.MatlabParameterMixin"
    mixin("ret_value")="com.github.kornilova203.matlab.psi.MatlabRetValueMixin"
    mixin("block")="com.github.kornilova203.matlab.psi.MatlabBlockMixin"
    mixin("for_loop")="com.github.kornilova203.matlab.psi.MatlabForLoopMixin"
    mixin("parfor_loop")="com.github.kornilova203.matlab.psi.MatlabParforLoopMixin"
    mixin("lambda_expr")="com.github.kornilova203.matlab.psi.MatlabLambdaExprMixin"
    mixin("global_variable_declaration")="com.github.kornilova203.matlab.psi.MatlabStubbedGlobalVariable"
    mixin("matrix_item")="com.github.kornilova203.matlab.psi.MatlabMatrixItemMixin"
    mixin("binary_expr")="com.github.kornilova203.matlab.psi.MatlabBinaryExprMixin"
    mixin("function_expr")="com.github.kornilova203.matlab.psi.MatlabFunctionExprMixin"
    mixin("literal_expr")="com.github.kornilova203.matlab.psi.MatlabLiteralExprMixin"
    mixin("qualified_expr")="com.github.kornilova203.matlab.psi.MatlabQualifiedExprMixin"
    mixin("property")="com.github.kornilova203.matlab.psi.MatlabPropertyMixin"
    mixin("enum_item")="com.github.kornilova203.matlab.psi.MatlabDeclarationBase"
}

root ::= NEWLINE * (element NEWLINE *) * end?

private meta p_opt_list ::= '(' [ !')' <<list <<item>>>> sep ] ')' { pin=1 }
private meta list ::= sep <<list_item <<item>>>> (sep ',' sep <<list_item <<item>>>>)* sep { recoverWhile=not_rparenth }
private not_rparenth ::= !( ')' )
private meta list_item ::= {} <<item>> { pin=1 recoverWhile=not_rparenth_or_comma }
private not_rparenth_or_comma ::= !( ')' | ',' | '...' | NEWLINE )
private meta comma_list ::= <<comma_list_item <<item>>>> (br* ',' br* <<comma_list_item <<item>>>>)*
private meta comma_list_item ::= {} <<item>> { pin=1 }
external ident ::= parseIdentifier
external ws ::= parseWhiteSpace br

private one_line_recovery ::= !( end | NEWLINE | '...' )

private element ::= ( el [ ';' | ',' ] ) | ';' | ','
private el ::= if_block
  | switch_block
  | try_block
  | global br* global_variable_declaration (br* global_variable_declaration)*
  | file_operation
  | for_loop
  | while_loop
  | parfor_loop
  | spmd_block
  | function_declaration
  | class_declaration
  | expr
  | COMMENT { pin(".*_3")=1 }

meta block ::= (<<p>> NEWLINE *)*
private block_that_recovers_until_end ::= <<block element>> { recoverWhile=not_end_or_oef }
private not_end_or_oef ::= !( NEWLINE* ( end | <<eof>> ) )

global_variable_declaration ::= ident

if_block ::= if br* condition ','? NEWLINE*
  if_block_body NEWLINE*
  elseif_block* NEWLINE*
  [else_block NEWLINE*]
  end { pin=1 }

condition ::= expr

private if_block_body ::= <<block element>> { recoverWhile=not_end_or_elseif_or_else }
private not_end_or_elseif_or_else ::= !( NEWLINE* (end | elseif | else) )

elseif_block ::= elseif br* condition NEWLINE * if_block_body { pin=1 }
else_block ::= else NEWLINE* if_block_body

switch_block ::= switch br* switch_expression NEWLINE*
  case_block* NEWLINE*
  [otherwise_block NEWLINE*]
  end { pin=1 }
switch_expression ::= expr { recoverWhile=case_block_recovery }
case_block ::= case NEWLINE* case_expression NEWLINE* <<block element>> { pin=1 recoverWhile=case_block_recovery }
case_expression ::= expr
otherwise_block ::= otherwise NEWLINE* <<block element>> { pin=1 recoverWhile=case_block_recovery }
private case_block_recovery ::= !( NEWLINE* ( case | otherwise | end ) )

try_block ::= try sep
  <<block element>>
  catch_block?
  end
  {pin=1}
catch_block ::= catch [ br* ident ] sep <<block element>> {pin=1}

for_loop ::= for br* for_loop_range [ ';' | ',' ] NEWLINE*
    block_that_recovers_until_end
    end { pin=1 }
for_loop_range ::= expr

while_loop ::= while br* while_loop_condition [ ';' | ',' ] NEWLINE*
    block_that_recovers_until_end
    end { pin=1 }
while_loop_condition ::= expr

parfor_loop ::= parfor br* parfor_loop_range [ ';' | ',' ] NEWLINE*
    block_that_recovers_until_end
    end { pin=1 }
parfor_loop_range ::= '(' assign_expr sep ',' sep expr ')' | assign_expr

spmd_block ::= spmd NEWLINE* <<block element>> end { pin=1 }

function_declaration ::= function br* return_value_part? br* getter_or_setter_modifier? <<withOn 'ALLOW_END_AS_IDENTIFIER' ident>> br* parameters? NEWLINE*
    block_that_recovers_until_end
    NEWLINE* ( end | <<eof>> ) { pin=1 }
getter_or_setter_modifier ::= ident '.'
private return_value_part ::= single_return_value_part | multiple_return_values_part
// note pin value
private single_return_value_part ::= single_ret_value br* '=' { pin=3 }
private multiple_return_values_part ::= multiple_ret_values br* '=' { pin=1 }
multiple_ret_values ::= '[' br* ret_values_list? br* ']' { pin=1 extends=return_values elementType=return_values }
fake return_values ::= ret_value*
private ret_values_list ::= ret_value (br* ','? br* ret_value)* {recoverWhile=ret_values_list_recovery }
private ret_values_list_recovery ::= !( br* ']' | br* '=' | br* NEWLINE )
single_ret_value ::= ret_value { recoverWhile=not_expr_or_equal extends=return_values elementType=return_values }
ret_value ::= ident
private not_expr_or_equal ::=!( ident | expr | '=' | NEWLINE )
parameters ::= <<p_opt_list parameter>> { extends=parameters_list }
fake parameters_list ::= parameter*
parameter ::= ident | '~'

class_declaration ::= classdef br* attributes? br* ident br* super_classes? NEWLINE*
    class_body NEWLINE*
    end { pin=1 }
private class_body ::= (( properties_block | methods_block | events_block | enumeration_block ) NEWLINE*)* { recoverWhile=not_end_or_oef }

super_classes ::= '<' br* super_classes_list { pin=1 }
private super_classes_list ::= super_classes_list_item ('&' super_classes_list_item) *
private super_classes_list_item ::= ref_expr { recoverWhile=not_ampersand_or_super_class_or_properties_or_methods_or_end }
private not_ampersand_or_super_class_or_properties_or_methods_or_end ::= !( br* '&'
    | br* super_classes_list_item
    | NEWLINE* properties_token
    | NEWLINE* methods_token
    | NEWLINE* events_token
    | NEWLINE* enumeration_token
    | NEWLINE* end )

properties_block ::= properties_token br* attributes? NEWLINE*
    properties_list NEWLINE*
    end { pin=1 recoverWhile=block_inside_class_recovery }
private properties_token ::= <<parseIdentifierAsKeyword 'PROPERTIES'>>
attributes ::= <<p_opt_list attribute>>
attribute ::= [ '~' ] ref_expr [ sep '=' sep expr ] { pin(".*")=2 }
properties_list ::= (property NEWLINE*)* { recoverWhile=block_inside_class_recovery }
property ::= ident property_size? class_name? property_validation_functions? ('=' default_value)? [ ';' ]
property_size ::= <<p_opt_list dimension>>
dimension ::= INTEGER | ':'
class_name ::= ref_expr
property_validation_functions ::= '{' <<comma_list property_validation_function>> '}'
default_value ::= expr
private property_validation_function ::= expr
private block_inside_class_recovery ::= !( NEWLINE*  ( end | methods_token | properties_token | events_token | enumeration_token ) )

methods_block ::= methods_token br* attributes? NEWLINE*
    methods_list NEWLINE*
    end { pin=1 recoverWhile=block_inside_class_recovery }
private methods_token ::= <<parseIdentifierAsKeyword 'METHODS'>>
methods_list ::= (function_declaration NEWLINE*)* { recoverWhile=block_inside_class_recovery }

events_block ::= events_token br* attributes? NEWLINE*
    events_list NEWLINE*
    end { pin=1 recoverWhile=block_inside_class_recovery }
private events_token ::= <<parseIdentifierAsKeyword 'EVENTS'>>
events_list ::= (ref_expr NEWLINE*)* { recoverWhile=events_block_body_recovery }
private events_block_body_recovery ::= !( NEWLINE* end )

enumeration_block ::= enumeration_token NEWLINE*
    ( <<comma_list_item <<enum_item>>>> ( ',' <<comma_list_item <<enum_item>>>> | NEWLINE* enum_item )* ) NEWLINE *
    end
    { pin=1 recoverWhile=block_inside_class_recovery }
private enumeration_token ::= <<parseIdentifierAsKeyword 'ENUMERATION'>>
enum_item ::= ident arguments?

;{
    name(".*literal")='literal'
    name(".*expr")='expression'

    extends("literal_expr")=expr
    extends("cell_array_access_expr")=expr
    extends("range_expr")=expr
    extends("function_expr")=expr
    extends("paren_expr")=expr
    extends("lambda_expr")=expr
    extends("binary_expr")=expr
    extends("ref_expr")=expr
    extends("control_expr")=expr
    extends(".*_expr")=binary_expr
    mixin("assign_expr")="com.github.kornilova203.matlab.psi.MatlabAssignExprMixin"
}

expr ::= assign_expr
  | or_expr
  | and_expr
  | matrix_or_expr
  | matrix_and_expr
  | compare_group
  | range_expr
  | add_group
  | mul_group
  | unary_group
  | primary_group

fake binary_expr ::= expr + {
  methods=[
    left="/expr[0]"
    right="/expr[1]"
  ]
}

assign_expr ::= expr ws '=' ws expr { pin='=' rightAssociative=true }

private compare_group ::= equal_expr
  | not_equal_expr
  | less_expr
  | less_or_equal_expr
  | more_expr
  | more_or_equal_expr

private unary_group ::= unary_inc_expr
  | unary_dec_expr
  | unary_prefix_dec_expr
  | unary_prefix_inc_expr
  | unary_plus_expr
  | unary_min_expr
  | ctranspose_expr
  | transpose_expr
  | unary_negation_expr
  | meta_class_expr

private mul_group ::= mul_expr
  | element_wise_mul_expr
  | rdiv_expr
  | element_wise_rdiv_expr
  | ldiv_expr
  | element_wise_ldiv_expr
  | pow_expr
  | element_wise_pow_expr

private add_group ::= plus_expr
  | minus_expr

private primary_group ::= literal_expr
  | qualified_with_keyword_expr
  | qualified_expr
  | direct_function_expr
  | function_expr
  | cell_array_access_expr
  | ref_expr
  | paren_expr
  | lambda_expr
  | function_ref_expr
  | control_expr

literal_expr ::= number_literal
  | string_literal
  | matrix_literal
  | cell_array_literal

private number_literal ::= FLOAT | FLOAT_EXPONENTIAL | INTEGER
private string_literal ::= DOUBLE_QUOTE_STRING | SINGLE_QUOTE_STRING

matrix_literal ::= '[' sep matrix_content? sep ']' { pin=1 }
private sep ::= (br | NEWLINE)*
private matrix_content ::= matrix_row ( sep ';' NEWLINE* sep matrix_row )* sep ';'? { recoverWhile=not_rbracket }
private not_rbracket ::= one_line_recovery !( ']' )
matrix_row ::= matrix_item ( sep (',' sep)?  matrix_item)* sep ','? { recoverWhile=not_rbracket_or_semicolon }
private not_rbracket_or_semicolon ::= not_rbracket !( ';' )
matrix_item ::= '~' | expr

cell_array_literal ::= '{' sep cell_array_content? sep '}' { pin=1 }
private cell_array_content ::= cell_array_row ( sep ';' sep cell_array_row )* [sep ';'] { recoverWhile=cell_array_content_recovery }
private cell_array_content_recovery ::= one_line_recovery !( '}' )
cell_array_row ::= cell_array_item ( sep (',' sep)? cell_array_item )* sep ','? { recoverWhile=cell_array_row_recovery }
private cell_array_row_recovery ::= one_line_recovery !( '}' | sep ';' )
cell_array_item ::= expr

cell_array_access_expr ::= expr '{' sep cell_array_access_item_list sep '}'
private cell_array_access_item_list ::= <<withOff 'NEW_LINE_ALLOWED' (<<withOn 'ALLOW_END_AS_IDENTIFIER' (<<comma_list argument>>)>>)>> [ sep ';' ] { recoverWhile=not_brace }
private not_brace ::= !('}')

range_expr ::= expr ws ':' ws expr [ ws ':' ws expr ]

direct_function_expr ::= function_call_or_matrix_element_access { elementType=function_expr }
function_expr ::= expr ws arguments
private function_call_or_matrix_element_access ::= <<withOn 'ALLOW_END_AS_IDENTIFIER' ref_expr>> ws arguments
arguments ::= <<withOn 'NEW_LINE_ALLOWED' (<<withOn 'ALLOW_END_AS_IDENTIFIER' (<<p_opt_list argument>>)>>)>>
private argument ::= expr | all_items_range
all_items_range ::= ':' { extends=expr }

paren_expr ::= '(' ws expr? ws ')' { pin=1 }

not_equal_expr ::= expr ws '~=' ws expr
equal_expr ::= expr ws '==' ws expr
less_expr ::= expr ws '<' ws expr
less_or_equal_expr ::= expr ws '<=' ws expr
more_expr ::= expr ws '>' ws expr
more_or_equal_expr ::= expr ws '>=' ws expr

or_expr ::= expr ws '||' ws expr
matrix_or_expr ::= expr ws '|' ws expr
and_expr ::= expr ws '&&' ws expr
matrix_and_expr ::= expr ws '&' ws expr

qualified_expr ::= expr '.' expr
qualified_with_keyword_expr ::= expr '.' <<parseKeywordAsRefExpression>> {elementType=qualified_expr}
ref_expr ::= ident
unary_min_expr ::= '-' ws expr
unary_dec_expr ::= expr ws '--'
unary_prefix_dec_expr ::= '--' ws expr
unary_inc_expr ::= expr ws '++'
unary_prefix_inc_expr ::= '++' ws expr
unary_plus_expr ::= '+' ws expr
ctranspose_expr ::= expr ws "'"
transpose_expr ::= expr ws ".'"
unary_negation_expr ::= '~' ws expr
meta_class_expr ::= '?' ws ref_expr

rdiv_expr ::= expr ws '/' ws expr
element_wise_rdiv_expr ::= expr ws './' ws expr
ldiv_expr ::= expr ws '\' ws expr
element_wise_ldiv_expr ::= expr ws '.\' ws expr
mul_expr ::= expr ws '*' ws expr
element_wise_mul_expr ::= expr ws '.*' ws expr
pow_expr ::= expr ws '^' ws expr
element_wise_pow_expr ::= expr ws '.^' ws expr

minus_expr ::= expr ws '-' ws expr
plus_expr ::= expr ws '+' ws expr

private br ::= '...' NEWLINE { pin=1 }

function_ref_expr ::= '@' ref_expr { pin=1 }

lambda_expr ::= '@' br* parameters br* lambda_body { pin=3 }
lambda_body ::= expr

control_expr ::= return | break | continue

file_operation ::= (LOAD | DIR | LS | CD) br* FILE_NAME br* variables? { pin=1 }
variables ::= variable+
private variable ::= ident
